name: Daily Database Backup

on:
  # Run daily at 2 AM UTC
  schedule:
    - cron: '0 2 * * *'

  # Allow manual trigger
  workflow_dispatch:

jobs:
  backup:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Create backup directory
        run: |
          mkdir -p backups
          echo "Backup directory created"

      - name: Export database to SQL
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          BACKUP_FILE="backups/railway_backup_${TIMESTAMP}.sql"

          echo "Creating backup: ${BACKUP_FILE}"

          # Export database using pg_dump
          pg_dump "$DATABASE_URL" > "$BACKUP_FILE"

          # Create a "latest" symlink
          cp "$BACKUP_FILE" "backups/railway_backup_latest.sql"

          echo "Backup created successfully"

          # Show backup stats
          echo "Backup size: $(du -h "$BACKUP_FILE" | cut -f1)"
          echo "Record counts:"

      - name: Get record counts
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          psql "$DATABASE_URL" -c "
            SELECT 'flights' as table_name, COUNT(*) as count FROM flights
            UNION ALL
            SELECT 'transport', COUNT(*) FROM transport
            UNION ALL
            SELECT 'not_travelling', COUNT(*) FROM not_travelling
            UNION ALL
            SELECT 'service_providers', COUNT(*) FROM service_providers
            ORDER BY table_name;
          " || echo "Could not retrieve record counts"

      - name: Commit and push backup
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          git add backups/

          # Only commit if there are changes
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S UTC")
            git commit -m "üóÑÔ∏è Automated database backup - ${TIMESTAMP}"
            git push
            echo "‚úÖ Backup committed and pushed to repository"
          fi

      - name: Keep only last 7 daily backups
        run: |
          cd backups
          # Keep only the 7 most recent backup files (plus the latest symlink)
          ls -t railway_backup_*.sql | grep -v "latest" | tail -n +8 | xargs -r rm
          echo "‚úÖ Cleaned up old backups, keeping last 7"

      - name: Commit cleanup
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          git add backups/

          if git diff --staged --quiet; then
            echo "No cleanup needed"
          else
            git commit -m "üßπ Cleanup old backups"
            git push
          fi

      - name: Upload backup as artifact (7-day retention)
        uses: actions/upload-artifact@v4
        with:
          name: database-backup-${{ github.run_number }}
          path: backups/railway_backup_latest.sql
          retention-days: 7
